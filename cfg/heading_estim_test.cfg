#!/usr/bin/env python
PACKAGE = "heading_estim_test"

import roslib;
roslib.load_manifest(PACKAGE)

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

sensing = gen.add_group("Sensing");

sensing.add("gyro_bias", double_t, 0, "gyro bias [rad/s]", 0.0, -1.0, 1.0)
sensing.add("position_measurement_sigma", double_t, 0, "position measurement sigma", 0.0, 0.0, 1.0)
sensing.add("speed_measurement_sigma", double_t, 0, "speed measurement sigma", 0.0, 0.0, 0.1)
sensing.add("heading_rate_measurement_sigma", double_t, 0, "heading rate measurement sigma", 0.0, 0.0, 0.1)

model = gen.add_group("UKF Model");

model.add("ukf_model_diagonal_coef", double_t, 0, "model_cov_diagonal_coef", 1.0, 0.00001, 100.0)
model.add("ukf_model_bias_variance", double_t, 0, "bias variance", 1.0, 0.00001, 100.0)
model.add("ukf_model_heading_variance", double_t, 0, "heading variance", 1.0, 0.00001, 100.0)
model.add("ukf_model_heading_rate_variance", double_t, 0, "heading rate variance", 1.0, 0.00001, 100.0)

measurement = gen.add_group("UKF Measurement");

measurement.add("ukf_mes_position_variance", double_t, 0, "position variance", 1.0, 0.001, 1000.0)
measurement.add("ukf_mes_speed_variance", double_t, 0, "speed variance", 1.0, 0.001, 1000.0)
measurement.add("ukf_mes_rate_variance", double_t, 0, "rate variance", 1.0, 0.001, 1000.0)

general = gen.add_group("General");

general.add("bias_compensation", bool_t, 0, "gyro bias compensation", True)

exit(gen.generate(PACKAGE, "HeadingEstimTest", "heading_estim_test"))
